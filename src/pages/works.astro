---
import { getCollection } from "astro:content";
import { categories } from "src/content/config";

import Card from "@components/Card.astro";
import StarShape from "@components/StarShape.astro";
import Layout from "@layouts/Layout.astro";

const worksEntries = await getCollection("works").then((collection) =>
  collection.sort((a, b) => {
    const dateA = new Date(a.data.date);
    const dateB = new Date(b.data.date);
    return dateB.getTime() - dateA.getTime();
  })
);
---

<Layout title="baptistejouin | my works" page="works">
  <main class="row">
    <div class="wrapper">
      <h1 transition:name="title">my works</h1>
      <div class="filter">
        <button class="active" data-category="0">all</button>
        {
          categories.map((category) => (
            <button data-category={category}>{category}</button>
          ))
        }
      </div>

      {
        worksEntries.map((work) => (
          <Card
            to={`/work/${work.slug}`}
            id={work.slug}
            category={work.data.category}
            title={work.data.title}
            thumbnail={work.data.thumbnail}
          />
        ))
      }
      <p class="empty hidden">There is no work for this category. :(</p>
    </div>
  </main>
  <StarShape offsetY={200} scale={0.6} side="left" />
</Layout>

<style lang="scss">
  @use "../lib/scss/variables" as v;
  @use "../lib/scss/mixins" as m;

  h1 {
    font-family: v.$ff-jetbrains;
  }
  main {
    min-height: 80svh;
  }
  .filter {
    grid-column: span var(--number-grid-columns);
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.25rem 0.5rem;
    margin-bottom: 3.5rem;

    button {
      color: var(--light-700);
      font-size: 1.5rem;
      font-family: v.$ff-jetbrains;

      @include m.before(lg) {
        font-size: 1.25rem;
      }

      &.active {
        color: var(--dark-900);

        &:before {
          content: "#";
        }
      }
    }
  }
  .empty {
    grid-column: span var(--number-grid-columns);
    text-align: center;
    font-size: 1.25rem;
    font-family: v.$ff-jetbrains;
    opacity: 0.5;
  }

  :global(.hidden) {
    display: none;
  }
</style>

<script>
  function initFiltersByCategory() {
    const filters = document.querySelectorAll(
      "div.filter button"
    ) as NodeListOf<HTMLButtonElement>;
    const cards = document.querySelectorAll(
      "main > div > a"
    ) as NodeListOf<HTMLAnchorElement>;
    const empty = document.querySelector("p.empty")!;

    const applyFilter = (category: string, updateUrl = true) => {
      // Update active button state
      filters.forEach((f) => {
        f.classList.toggle("active", f.dataset.category === category);
      });

      let hasVisibleCards = false;
      cards.forEach((card) => {
        if (category === "0") {
          card.classList.remove("hidden");
          hasVisibleCards = true;
        } else if (card.dataset.category !== category) {
          card.classList.add("hidden");
        } else {
          card.classList.remove("hidden");
          hasVisibleCards = true;
        }
      });

      empty.classList.toggle("hidden", hasVisibleCards);

      if (updateUrl) {
        if (category === "0") {
          history.pushState({ category }, "", "/works");
        } else {
          history.pushState({ category }, "", "/works#" + category);
        }
      }
    };

    filters.forEach((filter) => {
      filter.addEventListener("click", () => {
        const category = filter.dataset.category || "0";
        applyFilter(category, true);
      });
    });

    window.addEventListener("popstate", () => {
      const hash = window.location.hash.replace("#", "");
      const category = hash || "0";
      applyFilter(category, false);
    });

    const initialHash = window.location.hash.replace("#", "");
    if (initialHash) {
      applyFilter(initialHash, false);
    }
  }

  initFiltersByCategory();

  document.addEventListener("astro:after-swap", () => {
    initFiltersByCategory();
  });
</script>
